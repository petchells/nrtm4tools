version: "3"

vars:
  BINARIES: ["nrtm4client", "nrtm4serve"]
  WEB_DIR: "./web"
  WEB_BUILD_DIR: "{{.WEB_DIR}}/dist"
  TERN_DIR: "./third_party/tern"

silent: true

tasks:
  default:
    cmds:
      - task --list-all

  migrate:
    deps: [migrationscript]
    desc: Brings the database schema up to the latest version
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.conf --migrations {{.TERN_DIR}}

  build:
    desc: Builds, then tests all binaries and the web client
    deps: [buildgo, testgo, buildweb, testweb]

  test:
    desc: Tests the web client
    deps: [testgo, testweb]

  coverage:
    desc: Prints a coverage report of the Go code in ./docs/_generated
    deps: [test]
    cmds:
      - sh ./scripts/coverage.sh

  clean:
    desc: Removes all generated files except cached web modules
    deps: [cleanbinaries]
    cmds:
      - rm -rf {{.WEB_BUILD_DIR}}
      - rm -rf ./docs/_generated

  cleanall:
    desc: Removes all generated files
    deps: [clean]
    cmds:
      - rm -rf {{.WEB_DIR}}/node_modules

  buildgo:
    desc: Builds the Go binaries
    cmd:
      for:
        var: BINARIES
        as: app
      vars:
        APP: "{{.app}}"
      task: buildbinary

  testgo:
    desc: Runs all Go tests
    deps: [migratetest]
    cmds:
      - go test ./internal/...

  buildweb:
    desc: Does a production build of the web client
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npm run build

  testweb:
    desc: Runs web client tests
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npx vitest run

  # Development utils
  rewinddb:
    desc: Rolls the database schema back one version
    cmds:
      - tern migrate --destination -1 --config {{.TERN_DIR}}/tern.conf --migrations {{.TERN_DIR}}

  migratetest:
    desc: Brings the test database schema up to the latest version
    deps: [testmigrations]
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  emptytestdb:
    desc: Rolls the database back to the initial state
    cmds:
      - tern migrate --destination 1 --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  webdev:
    desc: Runs the web client on localhost in dev mode
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npm run dev

  cleanbinaries:
    desc: Removes all generated Go binaries
    cmd:
      for:
        var: BINARIES
        as: app
      vars:
        APP: "{{.app}}"
      task: cleanbinary

  # Internal targets
  installweb:
    internal: true
    status:
      - cd {{.WEB_DIR}} && test -d node_modules
    cmds:
      - cd {{.WEB_DIR}} && npm install

  buildbinary:
    internal: true
    cmds:
      - cd ./cmd/{{.APP}} && go build -race -o {{.APP}} -v
    sources:
      - ./cmd/{{.APP}}/main.go
      - ./internal/**/*.go
    generates:
      - ./cmd/{{.APP}}/{{.APP}}

  cleanbinary:
    internal: true
    cmds:
      - cd ./cmd/{{.APP}} && rm -rf {{.APP}} __debug_bin*

  testmigrations:
    internal: true
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}
      - tern migrate --destination -1 --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  migrationscript:
    internal: true
    cmds:
      - tern gengen --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}} > migrationscript.sql
    sources:
      - "{{.TERN_DIR}}/*.sql"
    generates:
      - migrationscript.sql
    run: when_changed
