version: "3"

vars:
  BINARIES: ["nrtm4client", "nrtm4serve"]
  WEB_APP: "nrtm4serve"
  WEB_DIR: "./web"
  WEB_BUILD_DIR: "{{.WEB_DIR}}/dist"
  TERN_DIR: "./third_party/tern"
  RELEASE_REPO: docker.io/etchells
  PGDUMP_CMD: pg_dump -h localhost -U postgres
  DOCKER_CMD:
    sh: command -v podman || command -v docker
  REVISION:
    sh: git rev-parse --short HEAD

silent: true

tasks:
  default:
    desc: List all tasks
    cmds:
      - task --list-all

  migrate:
    desc: Brings the database schema up to the latest version
    deps: [nrtm4_schema]
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.conf --migrations {{.TERN_DIR}}

  build:
    desc: Builds, then tests all binaries and the web client
    deps: [buildgo, testgo, buildweb, testweb]

  install:
    desc: Builds all binaries and creates a local image
    deps: [test, buildweb]
    cmds:
      - mkdir -p ./build/{{.WEB_APP}}/app/nrtm4-files >/dev/null 2>&1 || true
      - rsync -a --delete {{.WEB_BUILD_DIR}} ./build/{{.WEB_APP}}/app
      - cd ./cmd/{{.WEB_APP}} && env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o {{.WEB_APP}}_unix -v
      - mv ./cmd/{{.WEB_APP}}/{{.WEB_APP}}_unix ./build/{{.WEB_APP}}/app
      - cd ./build/{{.WEB_APP}} && {{.DOCKER_CMD}} build -t {{.WEB_APP}}-dev .

  release:
    desc: Pushes an image to the remote repository
    deps: [install]
    cmds:
      - "{{.DOCKER_CMD}} tag {{.WEB_APP}}-dev {{.RELEASE_REPO}}/{{.WEB_APP}}:{{.REVISION}}"
      - "{{.DOCKER_CMD}} push {{.RELEASE_REPO}}/{{.WEB_APP}}:{{.REVISION}}"
      - "{{.DOCKER_CMD}} tag {{.WEB_APP}}-dev {{.RELEASE_REPO}}/{{.WEB_APP}}:latest"
      - "{{.DOCKER_CMD}} push {{.RELEASE_REPO}}/{{.WEB_APP}}:latest"

  test:
    desc: Runs all front and back end tests
    deps: [testgo, testweb]

  coverage:
    desc: Prints a coverage report of the Go code in ./docs/_generated
    deps: [test]
    cmds:
      - sh ./scripts/coverage.sh

  clean:
    desc: Removes all generated files except cached web modules
    deps: [cleanbinaries]
    cmds:
      - rm -rf {{.WEB_BUILD_DIR}}
      - rm -rf ./docs/_generated
      - rm -rf ./build/{{.WEB_APP}}/app
      - '{{.DOCKER_CMD}} rmi "{{.WEB_APP}}-dev" >/dev/null 2>&1 || true'

  cleanall:
    desc: Removes all generated files
    deps: [clean]
    cmds:
      - rm -rf {{.WEB_DIR}}/node_modules
      - rm -rf ./deployments/docker/posgresql-data/*
      # - '{{.DOCKER_CMD}} rmi $({{.DOCKER_CMD}} images --filter=reference="{{.RELEASE_REPO}}/{{.WEB_APP}}:*" -q) >/dev/null || true'

  buildgo:
    desc: Builds binaries
    cmd:
      for:
        var: BINARIES
        as: app
      vars:
        APP: "{{.app}}"
      task: buildbinary

  testgo:
    desc: Runs all Go tests
    deps: [migratetest]
    cmds:
      - go test ./internal/...

  buildweb:
    desc: Does a production build of the web client
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npm run build

  testweb:
    desc: Runs web client tests
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npx vitest run

  # Development utils
  rewinddb:
    desc: Rolls the database schema back one version
    cmds:
      - tern migrate --destination -1 --config {{.TERN_DIR}}/tern.conf --migrations {{.TERN_DIR}}

  migratetest:
    desc: Brings the test database schema up to the latest version
    deps: [testmigrations]
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  emptytestdb:
    desc: Rolls the database back to the initial state
    cmds:
      - tern migrate --destination 1 --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  webdev:
    desc: Runs the web client on localhost in dev mode
    deps: [installweb]
    cmds:
      - cd {{.WEB_DIR}} && npm run dev

  # Internal targets
  installweb:
    internal: true
    cmds:
      - cd {{.WEB_DIR}} && npm install

  buildbinary:
    internal: true
    cmds:
      - cd ./cmd/{{.APP}} && go build -race -o {{.APP}} -v
    sources:
      - ./cmd/{{.APP}}/main.go
      - ./internal/**/*.go
    generates:
      - ./cmd/{{.APP}}/{{.APP}}
    run: when_changed

  cleanbinaries:
    internal: true
    cmd:
      for:
        var: BINARIES
        as: app
      cmd: cd ./cmd/{{.app}} && rm -rf {{.app}} __debug_bin*

  testmigrations:
    internal: true
    cmds:
      - tern migrate --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}
      - tern migrate --destination -1 --config {{.TERN_DIR}}/tern.test.conf --migrations {{.TERN_DIR}}

  nrtm4_schema:
    internal: true
    cmds:
      - "{{.PGDUMP_CMD}} --schema-only --no-privileges --no-comments --no-tablespaces nrtm4 > ./deployments/docker/initdb.d/nrtm4_schema.sql"
    sources:
      - "{{.TERN_DIR}}/*.sql"
    generates:
      - ./deployments/docker/initdb.d/nrtm4_schema.sql
    run: when_changed
