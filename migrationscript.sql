-- This file was generated by tern gengen v2.3.2.
--
-- If using psql to execute this script use the --no-psqlrc, --tuples-only,
-- --quiet, and --no-align options to only output the migration SQL.
--
-- e.g. psql --no-psqlrc --tuples-only --quiet --no-align -f this_file.sql
--
-- The results can be redirected to a file where the proposed changes can be
-- inspected or the results can be piped back into psql to migrate immediately.
--
-- e.g. psql --no-psqlrc --tuples-only --quiet --no-align -f this_file.sql | psql

set tern.version = -1;
do $$
declare
	schema_version_table_exists boolean;
begin
	select to_regclass('public.schema_version') is not null into schema_version_table_exists;
	if schema_version_table_exists then
		perform set_config('tern.version', version::text, false) from public.schema_version;
	end if;
end
$$;

with migrations(version, up_sql) as (
	values
	(0,
$tern_gengen$
begin;
create table public.schema_version(version int4 not null);
insert into public.schema_version(version) values(0);
$tern_gengen$)

, (1,
$tern_gengen$
-- 001_initialize_sequence.sql
begin;
create sequence _seq start 100;

CREATE OR REPLACE FUNCTION id_generator(OUT result bigint) AS $$
DECLARE
    our_epoch bigint := 1713484069680;
    seq_id bigint;
    now_millis bigint;
    -- the id of this DB shard, must be set for each
    -- schema shard you have - you could pass this as a parameter too
    shard_id int := 1;
BEGIN
    SELECT nextval('_seq') % 4096 INTO seq_id;
    SELECT FLOOR(EXTRACT(EPOCH FROM clock_timestamp()) * 1000) INTO now_millis;
    result := (now_millis - our_epoch) << 22;
    result := result | (shard_id << 12);
    result := result | (seq_id);
END;
$$ LANGUAGE PLPGSQL;$tern_gengen$)

, (2,
$tern_gengen$
-- 002_initial_schema.sql
begin;
create table nrtm_source (
	id bigint not null,
	source varchar(255) not null,
	session_id varchar(255) not null,
	version integer not null,
	notification_url text not null,
	label varchar(255) not null,
	created timestamp without time zone not null,

	constraint nrtm_source__pk primary key (id),
	constraint nrtm_source__source__label__uid unique (notification_url, label)
);

create table nrtm_notification (
	id bigint not null,
	version integer not null,
	nrtm_source_id bigint not null,
	payload jsonb not null,
	created timestamp without time zone not null,

	constraint nrtm_notification__pk primary key (id),
	constraint nrtm_notification__nrtm_source__fk foreign key(nrtm_source_id) references nrtm_source(id)
);

create index nrtm_notification__version__idx on nrtm_notification(nrtm_source_id, version);

create table nrtm_file (
	id bigint not null,
	version integer not null,
	type varchar(255) not null,
	url text not null,
	file_name text not null,
	nrtm_source_id bigint not null,
	created timestamp without time zone not null,

	constraint nrtm_file__pk primary key (id),
	constraint nrtm_file__nrtm_source__fk foreign key(nrtm_source_id) references nrtm_source(id)
);

create index nrtm_file__source_version_idx on nrtm_file(nrtm_source_id, version);

create table nrtm_rpslobject (
	id bigint not null,
	object_type varchar(255) not null,
	primary_key varchar(255) not null,
	nrtm_source_id bigint not null,
	from_version integer not null,
	to_version integer not null,
	rpsl text not null,

	constraint rpslobject__pk primary key (id),
	constraint rpslobject__nrtm_source__fk foreign key (nrtm_source_id) references nrtm_source(id),
	constraint rpslobject__nrtm_source__object_type__primary_key__from_version__uid unique (nrtm_source_id, object_type, primary_key, from_version),
	constraint rpslobject__nrtm_source__object_type__primary_key__to_version__uid unique (nrtm_source_id, object_type, primary_key, to_version)
);

create index rpslobject__primary_key__idx on nrtm_rpslobject(upper(primary_key));$tern_gengen$)

, (3,
$tern_gengen$
-- 003_rename_long_index_names.sql
begin;
alter table nrtm_rpslobject
    rename constraint rpslobject__nrtm_source__object_type__primary_key__from_version__uid to rpslobject__source__type__primary_key__from_version__uid;
alter table nrtm_rpslobject
    rename constraint rpslobject__nrtm_source__object_type__primary_key__to_version__uid to rpslobject__source__type__primary_key__to_version__uid;$tern_gengen$)

)
select up_sql || '
update public.schema_version set version = ' || version || ';
commit;
'
from migrations
where version > current_setting('tern.version')::int4
order by version asc;

